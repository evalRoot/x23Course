const { Grade, Competencies } = require('./models')

const gradeDefaultValues = [
  {
    grade: 'Уровень 1 (Подбор)',
    competencies: [
      'Приверженность корпоративным ценностям компании',
      'Коммуникация и взаимодействие (коллаборация с коллегами)',
      'Обучаемость в рамках заданного срока (Изучение материала по направлениям)',
      'Умение планировать рабочее время, навыки использования инструментов планирования задач.',
      'Обеспечение высокого CSI, умение работать с пользователями'
    ]
  },
  {
    grade: 'Уровень 2 (Стажер)',
    competencies: [
      'Коммуникация и взаимодействие (коллаборация с коллегами)',
      'Обучаемость в рамках заданного срока (Изучение материала по направлениям)',
      'Контроль соблюдения регламента SLA и OLA',
      'Умение планировать рабочее время, навыки использования инструментов планирования задач.',
      'Обеспечение высокого CSI, умение работать с пользователями'
    ]
  },
  {
    grade: 'Уровень 3 (Специалист)',
    competencies: [
      'Коммуникация и взаимодействие (коллаборация с коллегами)',
      'Контроль соблюдения регламента SLA и OLA',
      'Правильно определять бизнес процесс при решении инцидентов',
      'Взаимодействие с пользователя по инциденту (Сбор информации с пользователя по инциденту)',
      'Знание структуры хранения данных в системе по функционалу',
      'Умение работать с таблицами',
      'Умение работать с интеграционными решениями (IDOC, сообщения, XMLфайл)',
      'Уметь анализировать и предлагать варианты решения',
      'Прием на поддержку нового функционала от 3-ей линии',
      'Умение определять степень негативного влияния на бизнес по инциденту',
      'Умение планировать рабочее время, навыки использования инструментов планирования задач.',
      'Обеспечение высокого CSI, умение работать с пользователями',
      'Умение работать с информацией (в т.ч внешние источники)',
      'Умение работать в Confluence',
      'Умение работать в Jira'
    ]
  },
  {
    grade: 'Уровень 4 (Консультант)',
    competencies: [
      'Коммуникация и взаимодействие (коллаборация с коллегами)',
      'Контроль соблюдения регламента SLA и OLA',
      'Обучение и тестирование младших сотрудников (наставничество)',
      'Умение писать SQL запросы',
      'Умение работать с таблицами',
      'Умение работать через FireFighter FF',
      'Умение работать с инструментами массовой загрузки данных в системе (LSMW, ZFI_DOC_LOAD)',
      'Умение работать в Excel на продвинутом уровне (сложные функции, впр и т.д.)'
    ]
  },
  {
    grade: 'Уровень 5 (Старший консультант)',
    competencies: [
      'Коммуникация и взаимодействие (коллаборация с коллегами)',
      'Обучение и тестирование младших сотрудников (наставничество)',
      'Подготовка тестов для оценки компетенции сотрудников внутри отдела',
      'Оценка квалификации (результат тестирования) сотрудников',
      'Правильно определять бизнес процесс при решении инцидентов',
      'Взаимодействие с пользователя по инциденту (Сбор информации с пользователя по инциденту)',
      'Умение найти ошибку в коде, проверка настроек в соответствии с БТ',
      'Умение работать в ABAP-отладчике',
      'Умение определять степень негативного влияния на бизнес по инциденту'
    ]
  },
  {
    grade: 'Уровень 6 (Руководитель группы)',
    competencies: [
      'Прием на поддержку нового функционала от 3-ей линии',
      'Планирование и контроль по задачам группы',
      'Умение работать в Project и аналогичных инструментов планирования',
      'Подготовка статистики по инцидентам и анализ данных',
      'Взаимодействию 3-ей линией, бизнесом, сервис-менеджером для решения проблем и снижения количества инцидентов (формирование плана мероприятий)',
      'Понимание принципа разделение полномочий, работа с ролями, объектами полномочий',
      'Написание пользовательской и технической документации (инструкции, база знаний, FAQ, и т.д)',
      'Умение работать с информацией (в т.ч внешние источники)',
      'Знание бизнес процесса по своей функциональности'
    ]
  }
]


const createDefaultValues = async () => {
  try {
    let candidate = await Grade.findAll()
    let grade = ''

    if (candidate.length === 0) {
      for (let i = 0; i < gradeDefaultValues.length; i++) {
        grade =  await Grade.create({
          name: gradeDefaultValues[i].grade
        })


        for (let j = 0; j < gradeDefaultValues[i].competencies.length; j++) {
          await Competencies.create({
            name: gradeDefaultValues[i].competencies[j],
            GradeId: grade.id
          })
        }

      }
    }
  } catch(error) {
    console.log(error)
   }
}


module.exports = {
  createDefaultValues
}
